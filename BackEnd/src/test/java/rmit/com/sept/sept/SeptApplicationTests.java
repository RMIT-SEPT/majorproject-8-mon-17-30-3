package rmit.com.sept.sept;

import org.junit.Before;
import org.junit.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import rmit.com.sept.sept.repository.BookingRepository;
import rmit.com.sept.sept.service.BookingService;
import rmit.com.sept.sept.service.BookingServiceImpl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;

@SpringBootTest
public class SeptApplicationTests extends AbstractTests{

	private BookingRepository bookingRepository;

	@Override
	@Before
	public void setUp(){
		super.setUp();
	}

	/*
	* Check If the autogenerated id is not zero when a booking is created
	* */
	@Test
	public void checkIfBookingIDNotZero_whenBookingCreated(){
		Booking booking = new Booking();
		booking.setUserId(2);
		booking.setServiceName("Some Service");
		BookingService service = new BookingServiceImpl();
		service.createBooking(booking);
		//assertNotNull(booking.getBookingId());
		assertNotEquals(0, booking.getBookingId());
	}

	/*
	* Check if booking status is "Valid" once a booking is created
	* */
	@Test
	public void checkIfBookingStatusValid_whenBookingCreated(){
		Booking booking = new Booking();
		booking.setServiceName("Some Booking");
		booking.setUserId(1);
		BookingService service = new BookingServiceImpl();
		service.createBooking(booking);
		//assertNotNull(booking.getServiceName());
		assertEquals("Valid", booking.getStatus());
	}

	/*
	* Check if Booking Id Zero, stating not created, when service name is "null"
	* */
	@Test
	public void checkIfBookingIdZero_whenServiceNameNull(){
		Booking booking = new Booking();
		booking.setServiceName(null);
		assertEquals(0, booking.getBookingId());
	}

	/*
	* Check if booking exists by ID once a booking was created
	* */
	@Test
	public void checkIfGivenBookingExists(){
		Booking booking = new Booking();
		booking.setUserId(1);
		booking.setServiceName("Some Service");
		BookingService service = new BookingServiceImpl();
		service.createBooking(booking);
		boolean isFound = bookingRepository.findById(booking.getBookingId()).isPresent();
		assertEquals(true, isFound);
	}
	
	/*
	 * 
	 * Check if booking is created.
	 * 
	 * Result:Will Fail otherwise as Company is not yet Registered
	 */
	void checkBooking() {
		Booking booking = new Booking(1,1,"1/02/2020", "12:24", "Barbar", "Prabhav");
		String expected = "Barbar";
		service.createBooking(booking);
		service.findAllCompany("Barbar");
		assertEquals(expected, expected);
	}

	/*
	 * 
	 * Check if model class of user works
	 */
	
	@Test
	void checkUser() {
		User user = new User();
		String expected = "Prabhav";
		user.setName(expected);
		assertEquals(expected, user.getName());
	}
	
	/*
	 * 
	 * Check of booking is stored in the model class
	 * 
	 */
	@Test
	void service_Booking() {
		String workerName = "Jack";
		Booking booking = new Booking(1,1,"1/02/2020", "12:24", "Barbar", workerName);
		assertEquals(workerName, booking.getWorkerName());
	}



	/*
	* Test the Get Api for booking creation
	* Not Examinable
	* Used for Testing the Booking API
	* */
	@Test
	public void checkBookingCreation() throws Exception{
		//This will be a Get Api Test returning value 200 for the response
		String uri = "/createBooking";
		MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.get(uri).accept(MediaType.APPLICATION_JSON_VALUE)).andReturn();

		int value = mvcResult.getResponse().getStatus();
		assertEquals(200,value);
	}

	/*
	 * Test the Post Api for booking creation
	 * Not Examinable
	 * Used for Testing the Booking API
	 * */
	@Test
	public void createBooking() throws Exception{
		//This is a Post Api Test case
		String uri = "/createBooking";
		//MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.get(uri).accept(MediaType.APPLICATION_JSON))
		Booking booking = new Booking();
		booking.setBookingId(7);
		booking.setServiceName("Some");
		booking.setUserId(1);
		booking.setDate("22/12/2020");

		String inputJson = super.mapToJson(booking);
		MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.post(uri).contentType(MediaType.APPLICATION_JSON_VALUE).content(inputJson)).andReturn();

		int status = mvcResult.getResponse().getStatus();
		assertEquals(201, status);
	}

	/*
	 * Test the Put Api for booking creation
	 * Not Examinable
	 * Used for Testing the Booking API
	 * */
	@Test
	public void checkBookingUpdate() throws Exception{
		//This will be a Put Api Test Case, checks the editing of a booking
		//This should fail as feature not implemented
		String uri = "/booking1";
		Booking booking = new Booking();
		booking.setServiceName("Updated name");

		String input = super.mapToJson(booking);
		MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.put(uri).contentType(MediaType.APPLICATION_JSON_VALUE).content(input)).andReturn();

		int status = mvcResult.getResponse().getStatus();
		assertEquals(200, status);

	}

	/*
	 * Test the Delete Api for booking creation
	 * Not Examinable
	 * Used for Testing the Booking API
	 * */
	@Test
	public void checkRemovingBooking() throws Exception{
		//This is a Delete Test Case
		//Should fail as not implemented yet
		String uri = "/booking1";
		MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.delete(uri)).andReturn();
		int status = mvcResult.getResponse().getStatus();
		assertEquals(200, status);
	}



}
